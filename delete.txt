#include <stdio.h>
#include <stdlib.h>
struct Node{
    int data;
    struct Node* next; 
};

void traverse(struct Node * ptr){
    while (ptr!=NULL){
    printf("Element : %d\n",ptr->data);
    ptr = ptr->next;
    }
}

struct Node* delAtFirst(struct Node * head){
    struct Node * ptr;
    ptr= head;
    head=head->next;
    free(ptr);
    return head;
}

struct Node* delAtIndex(struct Node* head, int index){
    struct Node * p=head;
    struct Node *q =head->next;
    for(int i=0;i<index-1;i++){
        p=p->next;
        q=q->next;
    }
    p->next = q->next;
    free(q);
    return head;
}

struct Node* delAtValue(struct Node* head, int value){
    struct Node * p=head;
    struct Node *q =head->next;
    while(q->data != value  &&  q->next!=NULL){
        p=p->next;
        q=q->next;
    }
    if (q->data == value){
        p->next=q->next;
        free(q);
    }
    else{
        printf("Element %d is not present\n\n",value);
    }
    return head;
}



struct Node* delLast(struct Node* head){
    struct Node * p=head;
    struct Node *q =head->next;
    while(q->next!=NULL){
        p=p->next;
        q=q->next;
    }
    p->next = NULL;
    free(q);
    return head;
}

int main(){
    struct Node * head;
    struct Node * second;
    struct Node * third;
    struct Node * fourth;

    //Allocate memory for the node in the linked list in heap 
    head = (struct Node *) malloc (sizeof(struct Node));
    second= (struct Node *) malloc (sizeof(struct Node));
    third = (struct Node *) malloc (sizeof(struct Node));
    fourth = (struct Node *) malloc (sizeof(struct Node));

    //Link first and second nodes
    head -> data =8;
    head -> next = second;

    //Link second and third nodes
    second-> data =10;
    second-> next = third;

    //Link third and fourth nodes
    third-> data =50;
    third-> next = fourth;

    //Terminate the list at the fourth node
    fourth-> data =11;
    fourth-> next = NULL;

    traverse(head);
    printf("\n");
    // head=delAtFirst(head);
    // head=delAtIndex(head,2);
    // head=delLast(head);
    head=delAtValue(head,56);


    traverse(head);



    return 0;
}
